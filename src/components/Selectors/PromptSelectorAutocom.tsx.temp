import { IPrompt } from "@/Interfaces";
import { Button } from "@/components/ui/button";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { TrashIcon } from "@radix-ui/react-icons";
import { useQuery } from "@tanstack/react-query";
import * as React from "react";
import { useFieldArray } from "react-hook-form";
import { get_all_prompts } from "../queries";

interface IProps {
  form: any;
}

interface AutocompleteProps {
  prompts: IPrompt[];
  trigger: boolean;
  onSelect: (value: string) => void;
}

function Autocomplete({ prompts, trigger, onSelect }: AutocompleteProps) {
  const [filteredPrompts, setFilteredPrompts] = React.useState<IPrompt[]>([]);

  React.useEffect(() => {
    if (trigger) {
      setFilteredPrompts(prompts);
    } else {
      setFilteredPrompts([]);
    }
  }, [trigger, prompts]);

  return (
    <div className="relative">
      {filteredPrompts.length > 0 && (
        <div className="absolute z-10 mt-1 max-h-40 overflow-auto rounded border bg-white shadow">
          {filteredPrompts.map((prompt) => (
            <div
              key={prompt.slug}
              className="cursor-pointer p-2 hover:bg-gray-100"
              onClick={() => onSelect(prompt.prompt)}
            >
              <strong>{prompt.slug}</strong> - {prompt.name}
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

function PromptSelector({ form }: IProps) {
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "prompts",
  });

  const promptQuery = useQuery<IPrompt[]>({
    queryKey: ["get_all_prompts"],
    queryFn: (): Promise<IPrompt[]> => get_all_prompts(),
    refetchInterval: 30000, // Refresh every 30 seconds.
  });

  return (
    <div>
      {fields.map((field, index) => (
        <FormField
          key={field.id}
          control={form.control}
          name={`prompts.${index}.value`}
          render={({ field }) => {
            const [showAutocomplete, setShowAutocomplete] =
              React.useState(false);

            const handleInputChange = (value: string) => {
              field.onChange(value);
              setShowAutocomplete(value.startsWith("/"));
            };

            return (
              <FormItem>
                <FormLabel>Prompt {index + 1}</FormLabel>
                <FormControl>
                  <div className="relative">
                    <Textarea
                      value={field.value}
                      onChange={(e) => handleInputChange(e.target.value)}
                      placeholder="Type '/' to search prompts..."
                    />
                    <Autocomplete
                      prompts={promptQuery.data || []}
                      trigger={showAutocomplete}
                      onSelect={(value) => {
                        field.onChange(value);
                        setShowAutocomplete(false);
                      }}
                    />
                  </div>
                </FormControl>
                <FormMessage />
                <Button
                  type="button"
                  variant="ghost"
                  className="mt-2 text-red-500"
                  onClick={() => remove(index)}
                >
                  <TrashIcon className="mr-2" /> Remove
                </Button>
              </FormItem>
            );
          }}
        />
      ))}
      <Button
        type="button"
        className="mt-4"
        onClick={() => append({ value: "" })}
      >
        Add Prompt
      </Button>
    </div>
  );
}

export default PromptSelector;
