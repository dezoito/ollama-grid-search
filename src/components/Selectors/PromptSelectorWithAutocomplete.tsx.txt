import { IPrompt } from "@/Interfaces";
import { PromptDialog } from "@/components/prompt-dialog";
import { Button } from "@/components/ui/button";
import {
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Textarea } from "@/components/ui/textarea";
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { TrashIcon } from "@radix-ui/react-icons";
import { useQuery } from "@tanstack/react-query";
import * as React from "react";
import { useFieldArray } from "react-hook-form";
import { get_all_prompts } from "../queries";

interface IProps {
  form: any;
}

function PromptSelector({ form }: IProps) {
  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "prompts",
  });

  const [openCombobox, setOpenCombobox] = React.useState<number | null>(null);

  const promptQuery = useQuery<IPrompt[]>({
    queryKey: ["get_all_prompts"],
    queryFn: (): Promise<IPrompt[]> => get_all_prompts(),
    refetchInterval: 1000 * 30 * 1,
    refetchOnWindowFocus: "always",
    staleTime: 0,
  });

  const handleTextareaChange = (
    e: React.ChangeEvent<HTMLTextAreaElement>,
    index: number,
  ) => {
    const value = e.target.value;
    form.setValue(`prompts.${index}`, value);

    // Open combobox if text starts with "/"
    if (value.startsWith("/")) {
      setOpenCombobox(index);
    } else {
      setOpenCombobox(null);
    }
  };

  const handlePromptSelect = (selectedPrompt: IPrompt, index: number) => {
    form.setValue(`prompts.${index}`, selectedPrompt.prompt);
    setOpenCombobox(null);
  };

  const handleKeyDown = (
    e: React.KeyboardEvent<HTMLTextAreaElement>,
    _: number,
  ) => {
    if (e.key === "Escape") {
      setOpenCombobox(null);
      return;
    }
  };

  return (
    <FormField
      control={form.control}
      name="prompts"
      render={() => (
        <FormItem>
          <FormLabel className="flex flex-row items-center justify-between text-base font-bold">
            Prompts
          </FormLabel>
          {fields.map((field, index) => (
            <FormField
              key={field.id}
              control={form.control}
              name={`prompts.${index}`}
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="flex flex-row items-center justify-between font-bold">
                    Prompt {fields.length > 1 && (index + 1).toString()}
                    <div>
                      <PromptDialog
                        content={field.value}
                        handleChange={handleTextareaChange}
                        idx={index}
                        fieldName={`prompts.${index}`}
                        fieldLabel="prompt"
                      />
                      {fields.length > 1 && (
                        <Button
                          variant="destructiveGhost"
                          size="sm"
                          type="button"
                          onClick={() => remove(index)}
                        >
                          <Tooltip>
                            <TooltipTrigger asChild>
                              <TrashIcon className="h-4 w-4" />
                            </TooltipTrigger>
                            <TooltipContent>Delete prompt</TooltipContent>
                          </Tooltip>
                        </Button>
                      )}
                    </div>
                  </FormLabel>
                  <FormControl>
                    <div className="relative">
                      <Popover open={openCombobox === index}>
                        <PopoverTrigger asChild>
                          <Textarea
                            {...field}
                            className="flex-1"
                            rows={4}
                            onChange={(e) => handleTextareaChange(e, index)}
                            onKeyDown={(e) => handleKeyDown(e, index)}
                          />
                        </PopoverTrigger>
                        {field.value?.startsWith("/") && (
                          <PopoverContent
                            className="max-h-[300px] w-[500px] overflow-auto p-0"
                            align="start"
                          >
                            <div className="p-1">
                              {promptQuery.data
                                ?.filter((prompt) =>
                                  prompt.slug
                                    .toLowerCase()
                                    .startsWith(
                                      field.value.substring(1).toLowerCase(),
                                    ),
                                )
                                .map((prompt) => (
                                  <div
                                    key={prompt.uuid}
                                    className="flex cursor-pointer items-center rounded-sm px-2 py-1.5 text-sm hover:bg-gray-100"
                                    onClick={() =>
                                      handlePromptSelect(prompt, index)
                                    }
                                  >
                                    <span className="font-bold">{`/${prompt.slug}`}</span>
                                    <span className="ml-2 text-gray-500">
                                      {prompt.name}
                                    </span>
                                  </div>
                                ))}
                              {promptQuery.data?.filter((prompt) =>
                                prompt.slug
                                  .toLowerCase()
                                  .startsWith(
                                    field.value.substring(1).toLowerCase(),
                                  ),
                              ).length === 0 && (
                                <div className="px-2 py-1.5 text-sm text-gray-500">
                                  No prompts found
                                </div>
                              )}
                            </div>
                          </PopoverContent>
                        )}
                      </Popover>
                    </div>
                  </FormControl>
                  <FormDescription>The prompt you want to test</FormDescription>
                </FormItem>
              )}
            />
          ))}

          <FormMessage />
          {fields.length === 1 && (
            <FormDescription>
              Add another prompt to test multiple prompts.
            </FormDescription>
          )}
          <Button
            variant="secondary"
            size="sm"
            type="button"
            onClick={() => append("")}
          >
            Add Another Prompt
          </Button>
        </FormItem>
      )}
    />
  );
}

export default PromptSelector;
